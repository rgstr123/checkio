# coding: utf8

'''
Для Роботов десятичная форма чисел неудобна. Если вы попросите сосчитать сколько единиц (1) в числе, то их компьютерные мозги будут пытатся считать в двоичном представлении. Узнать больше о двоичных числах можно здесь .
Дано положительное целое число. Вам необходимо сконвертировать его в двоичную форму и подсчитать сколько единиц в написании данного числа. Для примера: 5 = 0b101 содержит две единицы, так что ответ 2.
Заметки: Эта задача легко решается с помощью двух функций" -- bin и count .
Вх. данные: Число как положительное целочисленное (int).
Вых. данные: Число единиц в двоичной форме данного числа (int).

Примеры:

checkio(4) == 1
checkio(15) == 4
checkio(1) == 1
checkio(1022) == 9

Как это используется: Здесь вы попрактикуетесь как конвертировать число в двоичную форму. Это очень полезный навык в области вычислительной техники.

Предусловия: 0 < number ≤ 2 32

Гвидо ван Россум (нидерл. Guido van Rossum), автор Python, один из наших самых знаменитых игроков. Иногда он пишет замечательные обзоры кода для решений наших пользователей.
'''

def checkio(number):
    num = bin(number)
    print("Number ", number, " in binary is: ", num)
    count = num.count("1")
    print("1 count: ", count)
    return count



# ____________________________________________________________________________
#
#     Быстрая запись:
#
#     return bin(number).count("1")
#
#
# ____________________________________________________________________________


# These "asserts" using only for self-checking and not necessary for auto-testing
if __name__ == '__main__':
    assert checkio(4) == 1
    assert checkio(15) == 4
    assert checkio(1) == 1
    assert checkio(1022) == 9