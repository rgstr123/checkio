'''
София ударом кулака впечатала перед собой кнопку. Дверь громыхнула и не пошевелилась.
"Ёлки, в конце концов это не так уж и интересно" пробурчала София.
Неожиданно дверь зашипела, и оттуда вылетела струя ледяного пара. Дверь начала отодвигаться от стены, как будто кто-то толкал её изнутри. София и двое с ней отскочили, глядя под ноги. В конце концов стена перестала двигаться и открыла им что-то вроде большого ящика.
"Ого, может это сокровища?" София внимательно разглядывала ящик.
Николай просунул голову в дверной проем, откуда только что появился ящик. "Ну, там только темнота." Он обернулся к ящику, который располагался несколькими футами выше и начал его изучать. Он заметил несколько царапин на боковой поверхности. "Эй, это похоже на какой-то список. Или упаковочный лист. Смотрите, здесь Ag, Na, Li, Mg... все элементы, которые мы можем использовать в производстве деталей, которые нам нужны для починки корабля!"
"Кстати, на нем панель с кнопками... Он заперт." София сказала это со вздохом разочарования.
"Не страшно, мы сможем вскрыть его. Давайте разберёмся."
Панель представляет собой решетку из пронумерованных точек. Решетка состоит из прямоугольной матрицы точек и линий, соединяющих некоторые пары близлежащих точек. Решением является код, равный количеству квадратов, образованных линиями. Например, на фигуре, представленной ниже, есть три квадрата: два малых и один средний.



Точки пронумерованы от 1 до 16. Линии представлены как списки (list) из двух чисел (концы линий).
Входные данные: Описания линий в виде списка (list) списков (list), каждый из которых содержит два целых числа.
Выходные данные: Количество квадратов в виде целого числа.


checkio([[1, 2], [3, 4], [1, 5], [2, 6], [4, 8], [5, 6], [6, 7],
     [7, 8], [6, 10], [7, 11], [8, 12], [10, 11],
     [10, 14], [12, 16], [14, 15], [15, 16]]) == 3
checkio([[1, 2], [2, 3], [3, 4], [1, 5], [4, 8],
     [6, 7], [5, 9], [6, 10], [7, 11], [8, 12],
     [9, 13], [10, 11], [12, 16], [13, 14], [14, 15], [15, 16]]) == 2


Как это используется: Это простая головоломка, иллюстрирующая задачу поиска по образцу. Вы можете усовершенствовать эту программу и использовать её для поиска более сложных шаблонов, структур и объектов.

Предусловия:
0 < len(lines) ≤ 32
'''

from typing import List


def checkio(lines_list: List[List[int]]) -> int:
    """Return the quantity of squares"""
    # Делаем что бы координаты в линии были по возрастанию, была [2, 1] стала [1, 2]
    for l in lines_list:
        if l[0] > l[1]:
            l[0], l[1] = l[1], l[0]

    # Получаем все возможные комбинации квадратов
    square_count = 0
    for width in range(1, 4):
        for i in range(4 - width):
            for j in range((4 - width)):
                isIn = True
                square = get_edges(4 * i + j + 1, width)  # Генерируем квадрат
                for sq_edge in square:
                    if sq_edge not in lines_list:  # Проверяем есть ли такой квадрат в условии задачи
                        isIn = False
                        break
                if isIn:
                    square_count += 1
    return square_count


def get_edges(start, width):
    result = []
    for i in range(width):
        result.append([start + i, start + i + 1])
        result.append([start + 4 * width + i, start + 4 * width + i + 1])
        result.append([start + 4 * i, start + 4 * i + 4])
        result.append([start + width + 4 * i, start + width + 4 * i + 4])
    return result


if __name__ == '__main__':
    print("Example:")
    print(checkio([[1, 2], [3, 4], [1, 5], [2, 6], [4, 8], [5, 6], [6, 7],
                   [7, 8], [6, 10], [7, 11], [8, 12], [10, 11],
                   [10, 14], [12, 16], [14, 15], [15, 16]]))

    assert (checkio([[1, 2], [3, 4], [1, 5], [2, 6], [4, 8], [5, 6], [6, 7],
                     [7, 8], [6, 10], [7, 11], [8, 12], [10, 11],
                     [10, 14], [12, 16], [14, 15], [15, 16]]) == 3), "First, from description"
    assert (checkio([[1, 2], [2, 3], [3, 4], [1, 5], [4, 8],
                     [6, 7], [5, 9], [6, 10], [7, 11], [8, 12],
                     [9, 13], [10, 11], [12, 16], [13, 14], [14, 15], [15, 16]]) == 2), "Second, from description"
    assert (checkio([[1, 2], [1, 5], [2, 6], [5, 6]]) == 1), "Third, one small square"
    assert (checkio([[1, 2], [1, 5], [2, 6], [5, 9], [6, 10], [9, 10]]) == 0), "Fourth, it's not square"
    assert (checkio([[16, 15], [16, 12], [15, 11], [11, 10],
                     [10, 14], [14, 13], [13, 9]]) == 0), "Fifth, snake"
    assert (checkio([[6, 5], [5, 9], [6, 10], [10, 9]]) == 1), "One square"
    print("Coding complete? Click 'Check' to earn cool rewards!")